----------------------------------------------------------------------------
model = Sequential([i
    Dense(300, input_dim=X.shape[-1]),
    Activation('relu'),
    Dropout(0.2),
    Dense(y.shape[-1])
])

mean IOU -> 0.8474378298368797 
notes   -> near perfect performance, IOU: ~.80 on most detection


----------------------------------------------------------------------------
model = Sequential([
    Dense(200, input_dim=X.shape[-1]),
    Activation('relu'),
    Dropout(0.2),
    Dense(y.shape[-1]),
    Activation('relu'),
    Dropout(0.2),
    Dense(y.shape[-1]),
    Activation('relu'),
    Dropout(0.2),
    Dense(y.shape[-1]),
])

mean IOU    -> 0.27763818032652304
notes   -> IOU drops to ~0.30


----------------------------------------------------------------------------
model = Sequential([
    Dense(200, input_dim=X.shape[-1]),
    Activation('relu'),
    Dropout(0.2),
    Dense(y.shape[-1]),
    Dropout(0.2)
])

mean IOU    -> 0.2088636718313387
notes   -> Very bad IOU at ~0.05


----------------------------------------------------------------------------
model = Sequential([
    Dense(200, input_dim=X.shape[-1]),
    Activation('relu'),
    Dropout(0.2),
    Dense(y.shape[-1]),
    Dense(y.shape[-1])
])

mean IOU    -> 0.8711312413522152
notes   -> better performance than original config, IOU: ~.90


----------------------------------------------------------------------------
model = Sequential([
    Dense(200, input_dim=X.shape[-1]),
    Activation('relu'),
    Dropout(0.2),
    Dense(y.shape[-1]),
    Dense(y.shape[-1]),
    Dense(y.shape[-1])
])

mean IOU    -> 0.8498666307056932
notes   -> performance resembling original config, IOU ~0.90


----------------------------------------------------------------------------
model = Sequential([
    Dense(200, input_dim=X.shape[-1]),
    Activation('relu'),
    Dropout(0.2),
    Dense(y.shape[-1]),
    Dense(y.shape[-1]),
    Dense(y.shape[-1]),
    Activation('relu')
])

mean IOU    -> 0.8944808075962144
notes   -> performance is stable
